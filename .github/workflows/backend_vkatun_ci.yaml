name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/vkatun"
  IMAGE_NAME: "vkatun"
  CONTAINER_NAME: "vkatun-container"

jobs:
  # пушим в наш registry
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        # логин и пароль храним в секретах гитхаба
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Image
        # многострочный ru. (echo $GITHUB_SHA | head -c7) -хэш коммита в 7 символов
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f backend/Dockerfile backend/ 

  deploy-image:
    runs-on: ubuntu-latest
    # выполняет только после выполнения image-build-and-push
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        # ssh-action с помощью которого мы сможем залезть на сервак
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Login into Selectel Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            
            # Generating the .env file
            cat > .env <<EOF
            JWT_SECRET=${{ vars.JWT_SECRET }}
            ADMIN_EMAILS=${{ vars.ADMIN_EMAILS }}
            DEEPSEEK_API_KEY=${{ vars.DEEPSEEK_API_KEY }}
            DEEPSEEK_URL=${{ vars.DEEPSEEK_URL }}
            DEEPSEEK_MODEL=${{ vars.DEEPSEEK_MODEL }}
            ROLE_SYSTEM=${{ vars.ROLE_SYSTEM }}
            ROLE_USER=${{ vars.ROLE_USER }}
            EXTRACT=${{ vars.EXTRACT }}
            GRAMMAR=${{ vars.GRAMMAR }}
            STRUCTURE=${{ vars.STRUCTURE }}
            SKILLS=${{ vars.SKILLS }}
            POSTGRES_STR=${{ vars.POSTGRES_STR }}
            POSTGRES_DB=${{ vars.POSTGRES_DB }}
            POSTGRES_USER=${{ vars.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }}
            EOF

            # Stop all old services
            docker-compose down

            # Update the backend image to the new one
            sed -i "s|build:.*|image: $REGISTRY/$IMAGE_NAME:$TAG_NAME|" docker-compose.yaml
            sed -i "/dockerfile:/d" docker-compose.yaml
            sed -i "/context:/d" docker-compose.yaml
            
            # Pull the latest images
            docker-compose pull
            
            # Start all services
            docker-compose up -d --force-recreate